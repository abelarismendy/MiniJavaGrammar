	/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Javita)
package lym.languages.javita;
import java.util.*;

public class Javita
{
  static ArrayList<String > varNames = new ArrayList<String>();
  static ArrayList<String > procNames = new ArrayList<String>();
  static HashMap<String, Integer> procParams = new HashMap<String, Integer>();
  static HashMap<String, Integer > globalScope = new HashMap<String, Integer>();
  public static void main(String args []) throws ParseException
  {
    Javita parser = new Javita(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
        varNames.clear();
        procNames.clear();
        globalScope.clear();
        Javita.program();
        System.out.print(varNames);
        System.out.print(procNames);
        System.out.print(procParams);
        System.out.print(globalScope);
        System.out.print("OK.\n");
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Javita.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}
PARSER_END(Javita)

SKIP:
{
		" "
	|	"\r"
	|	"\t"
	| 	"\n"
}
/*
TOKEN:
{
			< MOV:  "Mov" >
		| 	< RIGHT: "RIGHT" >
		| 	< PUT: "Put" >
		| 	< PICK: "Pick" >
		|  	< POP: "Pop" >
		| 	< GO: "GO" >
        |  	< HOP:  "HOP" >		

}*/

TOKEN: /*Comandos*/
{

  	< WALK: "walk" >
| 	< JUMP: "jump" >
| 	< JUMPTO: "jumpTo" >
| 	< VEER: "veer" >
| 	< LOOK: "look" >
| 	< DROP: "drop" >
|	< GRAB: "grab" >
| 	< GET: "get" >
| 	< FREE: "free" >
| 	< POP: "pop" >
}

TOKEN: /*Directions */
{
  < AROUND: "around" >
| < LEFT: "left" >
| < RIGHT: "right" >
}

TOKEN: /*Orientations */
{
  < NORTH: "north" >
| < SOUTH: "south" >
| < EAST: "east" >
| < WEST: "west" >
}

TOKEN:/*Walks */
{
  < FRONT: "front" >
| < BACK: "back" >
}

/*TOKEN:
{
			< BALLOONS:  "BALLOONS" >
		|	< CHIPS:     "CHIPS"  >	

}*/

TOKEN: /* Condiciones */
{
	< ISFACING: "isfacing" >
|	< ISVALID: "isValid"  >
|	< CANWALK: "canWalk"  >
|	< NOT: "not"  >	
}

TOKEN: /*LOGIC */
{
		< PROG: "PROG" >
	| 	< GORP: "GORP" >
	| 	< PROC: "PROC" >
	|   < CORP: "CORP" >
	|  	< VAR: "VAR" >
}

TOKEN:/*Control structures */
{
  < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < FI: "fi" >
| < DO: "do" >
| < OD: "od" >
| < REPEAT: "repeatTimes" >
| < PER: "per" >
| < PICK: "pick" >
}

TOKEN :
{
    < CONSTANT : (< DIGIT >)+ >
|	< WORD: (< LMINUS > | < LMAYUS >)(< LMINUS > | < LMAYUS > | < DIGIT >)* >
|   < #DIGIT : [ "0"-"9" ] >
|   < #LMINUS : ["a"-"z"] >
|   < #LMAYUS : ["A"-"Z"] >
}


TOKEN:
{
	< ASSIGNMENT : ":=" >
|	< PI : "(" >
|	< PD : ")" >
|	< CBL : "{" >
|	< CBR : "}" >
|	< SC : ";" >
|	< CM : "," >
}


void program():
{
}
{
	< PROG > (varDef())? (procDef())* < GORP >
}

void varDef():
{
  
}
{
	< VAR > saveGlobalNamesxType("VAR")( < CM > saveGlobalNamesxType("VAR"))* < SC >
}

Token saveGlobalNamesxType(String type):
{
  Token t;
}
{
	t = < WORD >
	{
	 	if (type == "VAR"){ 
	  		varNames.add(t.image);
	 	} else if (type == "PROC"){
	 	  	procNames.add(t.image);
        procParams.put(t.image, 0);
	 	}
	 	return t;
	}
}

void saveLocalNamesxType(ArrayList <String > localScope, String procN): /*Arreglar*/
{
  Token t;
}
{
	t = < WORD >
	{
		localScope.add(t.image);
    procParams.put(procN, procParams.get(procN) + 1);
	}
}

void procDef():
{
	ArrayList <String > localScope = new ArrayList<String>();
	Token scope;
}
{
	< PROC > scope=saveGlobalNamesxType("PROC") < PI > (saveLocalNamesxType(localScope, scope.image) (< CM > saveLocalNamesxType(localScope, scope.image))*)? < PD >
	< CBL > globalCommand(localScope) < CBR > < CORP >
	{
	  System.out.println(scope.image);
	  System.out.println(localScope);
	}
}

void globalCommand(ArrayList <String > localScope):
{
}
{
	command(localScope) (< SC > command(localScope))*
}

void command(ArrayList <String > localScope):
{
}
{
  (
  posibleCommands(localScope)
  | jumpTo(localScope)
  | veer()
  | look()
  | walk(localScope)
  | assignment(localScope)
  | ifBlock(localScope)
  | whileBlock(localScope)
  | repeatBlock(localScope)
  )
}

void posibleCommands(ArrayList <String > localScope):
{
}
{
  (
    < DROP > | < GRAB > | < GET > | < FREE > | < POP >
  )
  < PI > parameter(localScope, true) < PD >
}


Token parameter(ArrayList <String > localScope, boolean allowInt):
{
  Token t;
  Token d;
}
{
  t = < WORD >
  {
    if (localScope.contains(t.image) || varNames.contains(t.image) || globalScope.containsKey(t.image)){
      // System.out.println("OK");
      // System.out.println(t.image);
      return t;
    } else {
      System.out.println("NOK");
      System.out.println(t.image);
    }
  }
  | d = < CONSTANT >
  {
    if (allowInt){
      // System.out.println("OK");
      // System.out.println(d.image);
      return d;
    } else {
      System.out.println("NOK");
      System.out.println(d.image);
    }
  }
}


void jumpTo(ArrayList <String > localScope):
{
  Token t;
}
{
  < JUMPTO > < PI > parameter(localScope, true) < CM > parameter(localScope, true) < PD >
}

void posibleDirections():
{}
{
  < AROUND > | < LEFT > | < RIGHT >
}

void posibleOrientations():
{}
{
  < NORTH > | < SOUTH > | < EAST > | < WEST >
}

void posibleWalks():
{}
{
  < FRONT > | < BACK > | < LEFT > | < RIGHT >
}

void veer():
{}
{
  < VEER > < PI > posibleDirections() < PD >
}

void look():
{}
{
  < LOOK > < PI > posibleOrientations() < PD >
}

void walk(ArrayList <String > localScope):
{}
{
  < WALK > < PI > walksTypes(localScope) < PD >
}

void walksTypes(ArrayList <String > localScope):
{}
{
  parameter(localScope, true)
  | posibleWalks() < CM > parameter(localScope, true)
  | posibleOrientations() < CM > parameter(localScope, true)
}

void assignment(ArrayList <String > localScope):
{
  Token t;
  Token n;
}
{
  t=parameter(localScope, false) < ASSIGNMENT > n=< CONSTANT >
  {
    globalScope.put(t.image, Integer.parseInt(n.image));
  }
}

void terminalBlock(ArrayList <String > localScope):
{}
{
  < CBL > globalCommand(localScope) < CBR >
}

void validList():
{}
{
  < WALK >
  | < JUMP >
  | < GRAB >
  | < DROP >
  | < PICK >
  | < FREE >
  | < POP >
}

void isFacing():
{}
{
  < ISFACING > < PI > posibleOrientations() < PD >
}

void isValid(ArrayList <String > localScope):
{}
{
  < ISVALID > < PI > validList() < CM > parameter(localScope, true) < PD >
}

void canWalk(ArrayList <String > localScope):
{}
{
  < CANWALK > < PI > (posibleOrientations()| posibleWalks()) < CM > parameter(localScope, true) < PD >
}

void condition(ArrayList <String > localScope):
{}
{
  isFacing()
  | isValid(localScope)
  | canWalk(localScope)
}

void not(ArrayList <String > localScope):
{}
{
  < NOT > < PI > condition(localScope) < PD >
}

void ifBlock(ArrayList <String > localScope):
{}
{
  < IF > < PI > (not(localScope) | condition(localScope)) < PD > terminalBlock(localScope) ( < ELSE > terminalBlock(localScope) )? < FI >
}

void whileBlock(ArrayList <String> localScope):
{}
{
  < WHILE > < PI > condition(localScope) < PD > < DO > terminalBlock(localScope) < OD >
}

void repeatBlock(ArrayList <String> localScope):
{}
{
  < REPEAT > parameter(localScope, true) terminalBlock(localScope) < PER >
}

void insBlock(ArrayList <String> localScope):
{}
{
  < IF >
}
