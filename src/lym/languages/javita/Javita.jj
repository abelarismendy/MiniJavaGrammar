/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Javita)
package lym.languages.javita;
import java.util.*;

public class Javita
{
  static ArrayList<String > varNames = new ArrayList<String>();
  static ArrayList<String > procNames = new ArrayList<String>();
  static HashMap<String, Integer > globalScope = new HashMap<String, Integer>();
  public static void main(String args []) throws ParseException
  {
    Javita parser = new Javita(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
        Javita.program();
        System.out.print(varNames);
        System.out.print(procNames);
        System.out.print("OK.\n");
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Javita.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}
PARSER_END(Javita)

SKIP:
{
		" "
	|	"\r"
	|	"\t"
	| 	"\n"
}
/*
TOKEN:
{
			< MOV:  "Mov" >
		| 	< RIGHT: "RIGHT" >
		| 	< PUT: "Put" >
		| 	< PICK: "Pick" >
		|  	< POP: "Pop" >
		| 	< GO: "GO" >
        |  	< HOP:  "HOP" >		

}*/

TOKEN: /*Comandos*/
{

  	< WALK: "walk" >
| 	< JUMP: "jump" >
| 	< JUMPTO: "jumpTo" >
| 	< VEER: "veer" >
| 	< LOOK: "look" >
| 	< DROP: "drop" >
|	< GRAB: "grab" >
| 	< GET: "get" >
| 	< FREE: "free" >
| 	< POP: "pop" >
}

/*TOKEN:
{
			< BALLOONS:  "BALLOONS" >
		|	< CHIPS:     "CHIPS"  >	

}*/

TOKEN: /* Condiciones */
{
	< ISFACING: "isfacing" >
|	< ISVALID: "isValid"  >
|	< CANWALK: "canWalk"  >
|	< NOT: "not"  >	
}

TOKEN: /*LOGIC */
{
		< PROG: "PROG" >
	| 	< GORP: "GORP" >
	| 	< PROC: "PROC" >
	|   < CORP: "CORP" >
	|  	< VAR: "VAR" >
}
TOKEN :
{
    < CONSTANT : (< DIGIT >)+ >
|	< WORD: (< LMINUS > | < LMAYUS >)(< LMINUS > | < LMAYUS > | < DIGIT >)* >
|   < #DIGIT : [ "0"-"9" ] >
|   < #LMINUS : ["a"-"z"] >
|   < #LMAYUS : ["A"-"Z"] >
}


TOKEN:
{
	< ASSIGNMENT : ":=" >
|	< PI : "(" >
|	< PD : ")" >
|	< CBL : "{" >
|	< CBR : "}" >
|	< SC : ";" >
|	< CM : "," >
}


void program():
{
}
{
	< PROG > < CBL > (varDef())? procDef() < CBR > < GORP >
}

void varDef():
{
  
}
{
	< VAR > saveGlobalNamesxType("VAR")( < CM > saveGlobalNamesxType("VAR"))* < SC >
}

void saveGlobalNamesxType(String type):
{
  Token t;
}
{
	t = < WORD >
	{
	 	if (type == "VAR"){ 
	  		varNames.add(t.image);
	 	} else if (type == "PROC"){
	 	  	procNames.add(t.image);
	 	} 
	}
}

void saveLocalNamesxType(ArrayList <String > localScope): /*Arreglar*/
{
  Token t;
}
{
	t = < WORD >
	{
		localScope.add(t.image);
	}
}

void procDef():
{
	ArrayList <String > localScope = new ArrayList<String>();
}
{
	< PROC > saveGlobalNamesxType("PROC") < PI > saveLocalNamesxType(localScope) (< CM > saveLocalNamesxType(localScope))* < PD >
	{
	  System.out.println(localScope);
	}
}



